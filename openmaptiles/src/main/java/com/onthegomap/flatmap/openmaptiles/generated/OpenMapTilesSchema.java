// AUTOGENERATED BY Generate.java -- DO NOT MODIFY
package com.onthegomap.flatmap.openmaptiles.generated;

import static com.onthegomap.flatmap.openmaptiles.Expression.FALSE;
import static com.onthegomap.flatmap.openmaptiles.Expression.and;
import static com.onthegomap.flatmap.openmaptiles.Expression.matchAny;
import static com.onthegomap.flatmap.openmaptiles.Expression.or;

import com.onthegomap.flatmap.Arguments;
import com.onthegomap.flatmap.Translations;
import com.onthegomap.flatmap.monitoring.Stats;
import com.onthegomap.flatmap.openmaptiles.Layer;
import com.onthegomap.flatmap.openmaptiles.MultiExpression;
import java.util.List;
import java.util.Map;

public class OpenMapTilesSchema {

  public static final String NAME = "OpenMapTiles";
  public static final String DESCRIPTION = "A tileset showcasing all layers in OpenMapTiles. https://openmaptiles.org";
  public static final String VERSION = "3.12.1";
  public static final String ATTRIBUTION = "<a href=\"https://www.openmaptiles.org/\" target=\"_blank\">&copy; OpenMapTiles</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>";
  public static final List<String> LANGUAGES = List
    .of("am", "ar", "az", "be", "bg", "br", "bs", "ca", "co", "cs", "cy", "da", "de", "el", "en", "eo", "es", "et",
      "eu", "fi", "fr", "fy", "ga", "gd", "he", "hi", "hr", "hu", "hy", "id", "is", "it", "ja", "ja_kana", "ja_rm",
      "ja-Latn", "ja-Hira", "ka", "kk", "kn", "ko", "ko-Latn", "ku", "la", "lb", "lt", "lv", "mk", "mt", "ml", "nl",
      "no", "oc", "pl", "pt", "rm", "ro", "ru", "sk", "sl", "sq", "sr", "sr-Latn", "sv", "ta", "te", "th", "tr", "uk",
      "zh");

  public static List<Layer> createInstances(Translations translations, Arguments args, Stats stats) {
    return List.of(
      new com.onthegomap.flatmap.openmaptiles.layers.Water(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Waterway(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Landcover(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Landuse(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.MountainPeak(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Park(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Boundary(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Aeroway(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Transportation(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Building(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.WaterName(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.TransportationName(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Place(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Housenumber(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.Poi(translations, args, stats),
      new com.onthegomap.flatmap.openmaptiles.layers.AerodromeLabel(translations, args, stats)
    );
  }

  /**
   * Water polygons representing oceans and lakes. Covered watered areas are excluded (`covered=yes`). On low zoom
   * levels all water originates from Natural Earth. To get a more correct display of the south pole you should also
   * style the covering ice shelves over the water. On higher zoom levels water polygons from
   * [OpenStreetMapData](http://osmdata.openstreetmap.de/) are used. The polygons are split into many smaller polygons
   * to improve rendering performance. This however can lead to less rendering options in clients since these boundaries
   * show up. So you might not be able to use border styling for ocean water features.
   */
  public interface Water extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "water";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * All water polygons from [OpenStreetMapData](http://osmdata.openstreetmap.de/) have the class `ocean`. Water
       * bodies are classified as `lake` or `river` for water bodies with the [`waterway`](http://wiki.openstreetmap.org/wiki/Key:waterway)
       * tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>lake
       * <li>dock
       * <li>river
       * <li>ocean
       * </ul>
       */
      public static final String CLASS = "class";

      /**
       * Mark with `1` if it is an [intermittent](http://wiki.openstreetmap.org/wiki/Key:intermittent) water polygon.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * </ul>
       */
      public static final String INTERMITTENT = "intermittent";

      /**
       * Identifies the type of crossing as either a bridge or a tunnel.
       * <p>
       * allowed values:
       * <ul>
       * <li>"bridge"
       * <li>"tunnel"
       * </ul>
       */
      public static final String BRUNNEL = "brunnel";
    }

    final class FieldValues {

      public static final String CLASS_LAKE = "lake";
      public static final String CLASS_DOCK = "dock";
      public static final String CLASS_RIVER = "river";
      public static final String CLASS_OCEAN = "ocean";
      public static final String BRUNNEL_BRIDGE = "bridge";
      public static final String BRUNNEL_TUNNEL = "tunnel";
    }

    final class FieldMappings {

      public static final MultiExpression<String> Class = MultiExpression.of(Map
        .ofEntries(Map.entry("lake", matchAny("waterway", "", "lake")), Map.entry("dock", matchAny("waterway", "dock")),
          Map.entry("river", FALSE), Map.entry("ocean", FALSE)));
    }
  }

  /**
   * OpenStreetMap [waterways](https://wiki.openstreetmap.org/wiki/Waterways) for higher zoom levels (z9 and more) and
   * Natural Earth rivers and lake centerlines for low zoom levels (z3 - z8). Linestrings without a name or which are
   * too short are filtered out at low zoom levels. Till z11 there is `river` class only, in z12 there is also `canal`
   * generated, starting z13 there is no generalization according to `class` field applied. Waterways do not have a
   * `subclass` field.
   */
  public interface Waterway extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "waterway";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the waterway. The `name` field may be
       * empty for NaturalEarth data or at lower zoom levels.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";

      /**
       * The original value of the [`waterway`](http://wiki.openstreetmap.org/wiki/Key:waterway) tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>"stream"
       * <li>"river"
       * <li>"canal"
       * <li>"drain"
       * <li>"ditch"
       * </ul>
       */
      public static final String CLASS = "class";

      /**
       * Mark whether way is a tunnel or bridge.
       * <p>
       * allowed values:
       * <ul>
       * <li>"bridge"
       * <li>"tunnel"
       * </ul>
       */
      public static final String BRUNNEL = "brunnel";

      /**
       * Mark with `1` if it is an [intermittent](http://wiki.openstreetmap.org/wiki/Key:intermittent) waterway.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * </ul>
       */
      public static final String INTERMITTENT = "intermittent";
    }

    final class FieldValues {

      public static final String CLASS_STREAM = "stream";
      public static final String CLASS_RIVER = "river";
      public static final String CLASS_CANAL = "canal";
      public static final String CLASS_DRAIN = "drain";
      public static final String CLASS_DITCH = "ditch";
      public static final String BRUNNEL_BRIDGE = "bridge";
      public static final String BRUNNEL_TUNNEL = "tunnel";
    }

    final class FieldMappings {

    }
  }

  /**
   * Landcover is used to describe the physical material at the surface of the earth. At lower zoom levels this is from
   * Natural Earth data for glaciers and ice shelves and at higher zoom levels the landcover is [implied by OSM
   * tags](http://wiki.openstreetmap.org/wiki/Landcover). The most common use case for this layer is to style wood
   * (`class=wood`) and grass (`class=grass`) areas.
   */
  public interface Landcover extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "landcover";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * Use the class to assign natural colors for landcover .
       * <p>
       * allowed values:
       * <ul>
       * <li>farmland
       * <li>ice
       * <li>wood
       * <li>rock
       * <li>grass
       * <li>wetland
       * <li>sand
       * </ul>
       */
      public static final String CLASS = "class";

      /**
       * Use subclass to do more precise styling. Original value of either the [`natural`](http://wiki.openstreetmap.org/wiki/Key:natural),
       * [`landuse`](http://wiki.openstreetmap.org/wiki/Key:landuse), [`leisure`](http://wiki.openstreetmap.org/wiki/Key:leisure),
       * or [`wetland`](http://wiki.openstreetmap.org/wiki/Key:wetland) tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>"allotments"
       * <li>"bare_rock"
       * <li>"beach"
       * <li>"bog"
       * <li>"dune"
       * <li>"scrub"
       * <li>"farm"
       * <li>"farmland"
       * <li>"fell"
       * <li>"forest"
       * <li>"garden"
       * <li>"glacier"
       * <li>"grass"
       * <li>"grassland"
       * <li>"golf_course"
       * <li>"heath"
       * <li>"mangrove"
       * <li>"marsh"
       * <li>"meadow"
       * <li>"orchard"
       * <li>"park"
       * <li>"plant_nursery"
       * <li>"recreation_ground"
       * <li>"reedbed"
       * <li>"saltern"
       * <li>"saltmarsh"
       * <li>"sand"
       * <li>"scree"
       * <li>"swamp"
       * <li>"tidalflat"
       * <li>"tundra"
       * <li>"village_green"
       * <li>"vineyard"
       * <li>"wet_meadow"
       * <li>"wetland"
       * <li>"wood"
       * </ul>
       */
      public static final String SUBCLASS = "subclass";
    }

    final class FieldValues {

      public static final String CLASS_FARMLAND = "farmland";
      public static final String CLASS_ICE = "ice";
      public static final String CLASS_WOOD = "wood";
      public static final String CLASS_ROCK = "rock";
      public static final String CLASS_GRASS = "grass";
      public static final String CLASS_WETLAND = "wetland";
      public static final String CLASS_SAND = "sand";
      public static final String SUBCLASS_ALLOTMENTS = "allotments";
      public static final String SUBCLASS_BARE_ROCK = "bare_rock";
      public static final String SUBCLASS_BEACH = "beach";
      public static final String SUBCLASS_BOG = "bog";
      public static final String SUBCLASS_DUNE = "dune";
      public static final String SUBCLASS_SCRUB = "scrub";
      public static final String SUBCLASS_FARM = "farm";
      public static final String SUBCLASS_FARMLAND = "farmland";
      public static final String SUBCLASS_FELL = "fell";
      public static final String SUBCLASS_FOREST = "forest";
      public static final String SUBCLASS_GARDEN = "garden";
      public static final String SUBCLASS_GLACIER = "glacier";
      public static final String SUBCLASS_GRASS = "grass";
      public static final String SUBCLASS_GRASSLAND = "grassland";
      public static final String SUBCLASS_GOLF_COURSE = "golf_course";
      public static final String SUBCLASS_HEATH = "heath";
      public static final String SUBCLASS_MANGROVE = "mangrove";
      public static final String SUBCLASS_MARSH = "marsh";
      public static final String SUBCLASS_MEADOW = "meadow";
      public static final String SUBCLASS_ORCHARD = "orchard";
      public static final String SUBCLASS_PARK = "park";
      public static final String SUBCLASS_PLANT_NURSERY = "plant_nursery";
      public static final String SUBCLASS_RECREATION_GROUND = "recreation_ground";
      public static final String SUBCLASS_REEDBED = "reedbed";
      public static final String SUBCLASS_SALTERN = "saltern";
      public static final String SUBCLASS_SALTMARSH = "saltmarsh";
      public static final String SUBCLASS_SAND = "sand";
      public static final String SUBCLASS_SCREE = "scree";
      public static final String SUBCLASS_SWAMP = "swamp";
      public static final String SUBCLASS_TIDALFLAT = "tidalflat";
      public static final String SUBCLASS_TUNDRA = "tundra";
      public static final String SUBCLASS_VILLAGE_GREEN = "village_green";
      public static final String SUBCLASS_VINEYARD = "vineyard";
      public static final String SUBCLASS_WET_MEADOW = "wet_meadow";
      public static final String SUBCLASS_WETLAND = "wetland";
      public static final String SUBCLASS_WOOD = "wood";
    }

    final class FieldMappings {

      public static final MultiExpression<String> Class = MultiExpression.of(Map.ofEntries(
        Map.entry("farmland", matchAny("subclass", "farmland", "farm", "orchard", "vineyard", "plant_nursery")),
        Map.entry("ice", matchAny("subclass", "glacier", "ice_shelf")),
        Map.entry("wood", matchAny("subclass", "wood", "forest")),
        Map.entry("rock", matchAny("subclass", "bare_rock", "scree")), Map.entry("grass",
          matchAny("subclass", "fell", "grassland", "heath", "scrub", "tundra", "grass", "meadow", "allotments", "park",
            "village_green", "recreation_ground", "garden", "golf_course")), Map.entry("wetland",
          matchAny("subclass", "wetland", "bog", "swamp", "wet_meadow", "marsh", "reedbed", "saltern", "tidalflat",
            "saltmarsh", "mangrove")), Map.entry("sand", matchAny("subclass", "beach", "sand", "dune"))));
    }
  }

  /**
   * Landuse is used to describe use of land by humans. At lower zoom levels this is from Natural Earth data for
   * residential (urban) areas and at higher zoom levels mostly OSM `landuse` tags.
   */
  public interface Landuse extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "landuse";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * Use the class to assign special colors to areas. Original value of either the
       * [`landuse`](http://wiki.openstreetmap.org/wiki/Key:landuse), [`amenity`](http://wiki.openstreetmap.org/wiki/Key:amenity),
       * [`leisure`](http://wiki.openstreetmap.org/wiki/Key:leisure), [`tourism`](http://wiki.openstreetmap.org/wiki/Key:tourism),
       * [`place`](http://wiki.openstreetmap.org/wiki/Key:place) or [`waterway`](http://wiki.openstreetmap.org/wiki/Key:waterway)
       * tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>"railway"
       * <li>"cemetery"
       * <li>"military"
       * <li>"residential"
       * <li>"commercial"
       * <li>"industrial"
       * <li>"garages"
       * <li>"retail"
       * <li>"bus_station"
       * <li>"school"
       * <li>"university"
       * <li>"kindergarten"
       * <li>"college"
       * <li>"library"
       * <li>"hospital"
       * <li>"stadium"
       * <li>"pitch"
       * <li>"playground"
       * <li>"track"
       * <li>"theme_park"
       * <li>"zoo"
       * <li>"suburb"
       * <li>"quarter"
       * <li>"neighbourhood"
       * <li>"dam"
       * </ul>
       */
      public static final String CLASS = "class";
    }

    final class FieldValues {

      public static final String CLASS_RAILWAY = "railway";
      public static final String CLASS_CEMETERY = "cemetery";
      public static final String CLASS_MILITARY = "military";
      public static final String CLASS_RESIDENTIAL = "residential";
      public static final String CLASS_COMMERCIAL = "commercial";
      public static final String CLASS_INDUSTRIAL = "industrial";
      public static final String CLASS_GARAGES = "garages";
      public static final String CLASS_RETAIL = "retail";
      public static final String CLASS_BUS_STATION = "bus_station";
      public static final String CLASS_SCHOOL = "school";
      public static final String CLASS_UNIVERSITY = "university";
      public static final String CLASS_KINDERGARTEN = "kindergarten";
      public static final String CLASS_COLLEGE = "college";
      public static final String CLASS_LIBRARY = "library";
      public static final String CLASS_HOSPITAL = "hospital";
      public static final String CLASS_STADIUM = "stadium";
      public static final String CLASS_PITCH = "pitch";
      public static final String CLASS_PLAYGROUND = "playground";
      public static final String CLASS_TRACK = "track";
      public static final String CLASS_THEME_PARK = "theme_park";
      public static final String CLASS_ZOO = "zoo";
      public static final String CLASS_SUBURB = "suburb";
      public static final String CLASS_QUARTER = "quarter";
      public static final String CLASS_NEIGHBOURHOOD = "neighbourhood";
      public static final String CLASS_DAM = "dam";
    }

    final class FieldMappings {

    }
  }

  /**
   * [Natural peaks](http://wiki.openstreetmap.org/wiki/Tag:natural%3Dpeak)
   */
  public interface MountainPeak extends Layer {

    double BUFFER_SIZE = 64.0;
    String LAYER_NAME = "mountain_peak";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the peak.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";

      /**
       * Use the class to differentiate between mountain peak and volcano.
       * <p>
       * allowed values:
       * <ul>
       * <li>"peak"
       * <li>"volcano"
       * </ul>
       */
      public static final String CLASS = "class";
      /**
       * Elevation (`ele`) in meters.
       */
      public static final String ELE = "ele";
      /**
       * Elevation (`ele`) in feets.
       */
      public static final String ELE_FT = "ele_ft";
      /**
       * Rank of the peak within one tile (starting at 1 that is the most important peak).
       */
      public static final String RANK = "rank";
    }

    final class FieldValues {

      public static final String CLASS_PEAK = "peak";
      public static final String CLASS_VOLCANO = "volcano";
    }

    final class FieldMappings {

    }
  }

  /**
   * The park layer contains parks from OpenStreetMap tagged with [`boundary=national_park`](http://wiki.openstreetmap.org/wiki/Tag:boundary%3Dnational_park),
   * [`boundary=protected_area`](http://wiki.openstreetmap.org/wiki/Tag:boundary%3Dprotected_area), or
   * [`leisure=nature_reserve`](http://wiki.openstreetmap.org/wiki/Tag:leisure%3Dnature_reserve).
   */
  public interface Park extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "park";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * Use the class to differentiate between different parks. The class for `boundary=protected_area` parks is the
       * lower-case of the [`protection_title`](http://wiki.openstreetmap.org/wiki/key:protection_title) value with
       * blanks replaced by `_`. `national_park` is the class of `protection_title=National Park` and
       * `boundary=national_park`. `nature_reserve` is the class of `protection_title=Nature Reserve` and
       * `leisure=nature_reserve`. The class for other [`protection_title`](http://wiki.openstreetmap.org/wiki/key:protection_title)
       * values is similarly assigned.
       */
      public static final String CLASS = "class";
      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the park (point features only).
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name` (point features only).
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en` (point features only).
       */
      public static final String NAME_DE = "name_de";
      /**
       * Rank of the park within one tile, starting at 1 that is the most important park (point features only).
       */
      public static final String RANK = "rank";
    }

    final class FieldValues {

    }

    final class FieldMappings {

    }
  }

  /**
   * Contains administrative boundaries as linestrings. Until z4 [Natural Earth data](http://www.naturalearthdata.com/downloads/)
   * is used after which OSM boundaries ([`boundary=administrative`](http://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative))
   * are present from z5 to z14 (also for maritime boundaries with `admin_level <= 2` at z4). OSM data contains several
   * [`admin_level`](http://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative#admin_level) but for most styles
   * it makes sense to just style `admin_level=2` and `admin_level=4`.
   */
  public interface Boundary extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "boundary";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * OSM [admin_level](http://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative#admin_level) indicating the
       * level of importance of this boundary. The `admin_level` corresponds to the lowest `admin_level` the line
       * participates in. At low zoom levels the Natural Earth boundaries are mapped to the equivalent admin levels.
       */
      public static final String ADMIN_LEVEL = "admin_level";
      /**
       * State name on the left of the border. For country boundaries only (`admin_level = 2`).
       */
      public static final String ADM0_L = "adm0_l";
      /**
       * State name on the right of the border. For country boundaries only (`admin_level = 2`).
       */
      public static final String ADM0_R = "adm0_r";

      /**
       * Mark with `1` if the border is disputed.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * </ul>
       */
      public static final String DISPUTED = "disputed";

      /**
       * Field containing name of the disputed area (extracted from border relation in OSM, without spaces). For country
       * boundaries only (`admin_level = 2`). Value examples from Asian OSM pbf extract
       * <p>
       * allowed values:
       * <ul>
       * <li>"AbuMusaIsland"
       * <li>"BaraHotiiValleys"
       * <li>"ChineseClaim"
       * <li>"Crimea"
       * <li>"Demchok"
       * <li>"Dokdo"
       * <li>"IndianClaim-North"
       * <li>"IndianClaimwesternKashmir"
       * <li>"PakistaniClaim"
       * <li>"SamduValleys"
       * <li>"TirpaniValleys"
       * </ul>
       */
      public static final String DISPUTED_NAME = "disputed_name";
      /**
       * ISO2 code of country, which wants to see the boundary line. For country boundaries only (`admin_level = 2`).
       */
      public static final String CLAIMED_BY = "claimed_by";

      /**
       * Mark with `1` if it is a maritime border.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * </ul>
       */
      public static final String MARITIME = "maritime";
    }

    final class FieldValues {

      public static final String DISPUTED_NAME_ABUMUSAISLAND = "AbuMusaIsland";
      public static final String DISPUTED_NAME_BARAHOTIIVALLEYS = "BaraHotiiValleys";
      public static final String DISPUTED_NAME_CHINESECLAIM = "ChineseClaim";
      public static final String DISPUTED_NAME_CRIMEA = "Crimea";
      public static final String DISPUTED_NAME_DEMCHOK = "Demchok";
      public static final String DISPUTED_NAME_DOKDO = "Dokdo";
      public static final String DISPUTED_NAME_INDIANCLAIM_NORTH = "IndianClaim-North";
      public static final String DISPUTED_NAME_INDIANCLAIMWESTERNKASHMIR = "IndianClaimwesternKashmir";
      public static final String DISPUTED_NAME_PAKISTANICLAIM = "PakistaniClaim";
      public static final String DISPUTED_NAME_SAMDUVALLEYS = "SamduValleys";
      public static final String DISPUTED_NAME_TIRPANIVALLEYS = "TirpaniValleys";
    }

    final class FieldMappings {

    }
  }

  /**
   * Aeroway polygons based of OpenStreetMap [aeroways](http://wiki.openstreetmap.org/wiki/Aeroways). Airport buildings
   * are contained in the building layer but all other airport related polygons can be found in the aeroway layer.
   */
  public interface Aeroway extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "aeroway";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`ref`](http://wiki.openstreetmap.org/wiki/Key:ref) tag of the runway/taxiway.
       */
      public static final String REF = "ref";

      /**
       * The original value of [`aeroway`](http://wiki.openstreetmap.org/wiki/Key:aeroway) or `area:aeroway` tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>"aerodrome"
       * <li>"heliport"
       * <li>"runway"
       * <li>"helipad"
       * <li>"taxiway"
       * <li>"apron"
       * <li>"gate"
       * </ul>
       */
      public static final String CLASS = "class";
    }

    final class FieldValues {

      public static final String CLASS_AERODROME = "aerodrome";
      public static final String CLASS_HELIPORT = "heliport";
      public static final String CLASS_RUNWAY = "runway";
      public static final String CLASS_HELIPAD = "helipad";
      public static final String CLASS_TAXIWAY = "taxiway";
      public static final String CLASS_APRON = "apron";
      public static final String CLASS_GATE = "gate";
    }

    final class FieldMappings {

    }
  }

  /**
   * transportation contains roads, railways, aerial ways, and shipping lines. This layer is directly derived from the
   * OSM road hierarchy. At lower zoom levels major highways from Natural Earth are used. It contains all roads from
   * motorways to primary, secondary and tertiary roads to residential roads and foot paths. Styling the roads is the
   * most essential part of the map. The `transportation` layer also contains polygons for features like plazas.
   */
  public interface Transportation extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "transportation";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * Distinguish between more and less important roads or railways and roads under construction. Class is derived
       * from the value of the [`highway`](http://wiki.openstreetmap.org/wiki/Key:highway),
       * [`construction`](http://wiki.openstreetmap.org/wiki/Key:construction), [`railway`](http://wiki.openstreetmap.org/wiki/Key:railway),
       * [`aerialway`](http://wiki.openstreetmap.org/wiki/Key:aerialway), [`route`](http://wiki.openstreetmap.org/wiki/Key:route)
       * tag (for shipping ways), or [`man_made`](http://wiki.openstreetmap.org/wiki/Key:route).
       * <p>
       * allowed values:
       * <ul>
       * <li>motorway
       * <li>trunk
       * <li>primary
       * <li>secondary
       * <li>tertiary
       * <li>minor
       * <li>path
       * <li>service
       * <li>track
       * <li>raceway
       * <li>motorway_construction
       * <li>trunk_construction
       * <li>primary_construction
       * <li>secondary_construction
       * <li>tertiary_construction
       * <li>minor_construction
       * <li>path_construction
       * <li>service_construction
       * <li>track_construction
       * <li>raceway_construction
       * </ul>
       */
      public static final String CLASS = "class";

      /**
       * Distinguish more specific classes of railway and path: Subclass is value of the
       * [`railway`](http://wiki.openstreetmap.org/wiki/Key:railway), [`highway`](http://wiki.openstreetmap.org/wiki/Key:highway)
       * (for paths), or [`public_transport`](http://wiki.openstreetmap.org/wiki/Key:public_transport) (for platforms)
       * tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>"rail"
       * <li>"narrow_gauge"
       * <li>"preserved"
       * <li>"funicular"
       * <li>"subway"
       * <li>"light_rail"
       * <li>"monorail"
       * <li>"tram"
       * <li>"pedestrian"
       * <li>"path"
       * <li>"footway"
       * <li>"cycleway"
       * <li>"steps"
       * <li>"bridleway"
       * <li>"corridor"
       * <li>"platform"
       * </ul>
       */
      public static final String SUBCLASS = "subclass";

      /**
       * Mark whether way is a tunnel or bridge.
       * <p>
       * allowed values:
       * <ul>
       * <li>"bridge"
       * <li>"tunnel"
       * <li>"ford"
       * </ul>
       */
      public static final String BRUNNEL = "brunnel";

      /**
       * Mark with `1` whether way is a oneway in the direction of the way, with `-1` whether way is a oneway in the
       * opposite direction of the way or not a oneway with `0`.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * <li>-1
       * </ul>
       */
      public static final String ONEWAY = "oneway";

      /**
       * Mark with `1` whether way is a ramp (link or steps) or not with `0`.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * </ul>
       */
      public static final String RAMP = "ramp";

      /**
       * Original value of the [`service`](http://wiki.openstreetmap.org/wiki/Key:service) tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>"spur"
       * <li>"yard"
       * <li>"siding"
       * <li>"crossover"
       * <li>"driveway"
       * <li>"alley"
       * <li>"parking_aisle"
       * </ul>
       */
      public static final String SERVICE = "service";
      /**
       * Original value of the [`layer`](http://wiki.openstreetmap.org/wiki/Key:layer) tag.
       */
      public static final String LAYER = "layer";
      /**
       * Experimental feature! Filled only for steps and footways. Original value of the
       * [`level`](http://wiki.openstreetmap.org/wiki/Key:level) tag.
       */
      public static final String LEVEL = "level";

      /**
       * Experimental feature! Filled only for steps and footways. Original value of the
       * [`indoor`](http://wiki.openstreetmap.org/wiki/Key:indoor) tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>1
       * </ul>
       */
      public static final String INDOOR = "indoor";
      /**
       * Original value of the [`bicycle`](http://wiki.openstreetmap.org/wiki/Key:bicycle) tag (highways only).
       */
      public static final String BICYCLE = "bicycle";
      /**
       * Original value of the [`foot`](http://wiki.openstreetmap.org/wiki/Key:foot) tag (highways only).
       */
      public static final String FOOT = "foot";
      /**
       * Original value of the [`horse`](http://wiki.openstreetmap.org/wiki/Key:horse) tag (highways only).
       */
      public static final String HORSE = "horse";
      /**
       * Original value of the [`mtb:scale`](http://wiki.openstreetmap.org/wiki/Key:mtb:scale) tag (highways only).
       */
      public static final String MTB_SCALE = "mtb_scale";

      /**
       * Values of [`surface`](https://wiki.openstreetmap.org/wiki/Key:surface) tag devided into 2 groups `paved`
       * (paved, asphalt, cobblestone, concrete, concrete:lanes, concrete:plates, metal, paving_stones, sett,
       * unhewn_cobblestone, wood) and `unpaved` (unpaved, compacted, dirt, earth, fine_gravel, grass, grass_paver,
       * gravel, gravel_turf, ground, ice, mud, pebblestone, salt, sand, snow, woodchips).
       * <p>
       * allowed values:
       * <ul>
       * <li>"paved"
       * <li>"unpaved"
       * </ul>
       */
      public static final String SURFACE = "surface";
    }

    final class FieldValues {

      public static final String CLASS_MOTORWAY = "motorway";
      public static final String CLASS_TRUNK = "trunk";
      public static final String CLASS_PRIMARY = "primary";
      public static final String CLASS_SECONDARY = "secondary";
      public static final String CLASS_TERTIARY = "tertiary";
      public static final String CLASS_MINOR = "minor";
      public static final String CLASS_PATH = "path";
      public static final String CLASS_SERVICE = "service";
      public static final String CLASS_TRACK = "track";
      public static final String CLASS_RACEWAY = "raceway";
      public static final String CLASS_MOTORWAY_CONSTRUCTION = "motorway_construction";
      public static final String CLASS_TRUNK_CONSTRUCTION = "trunk_construction";
      public static final String CLASS_PRIMARY_CONSTRUCTION = "primary_construction";
      public static final String CLASS_SECONDARY_CONSTRUCTION = "secondary_construction";
      public static final String CLASS_TERTIARY_CONSTRUCTION = "tertiary_construction";
      public static final String CLASS_MINOR_CONSTRUCTION = "minor_construction";
      public static final String CLASS_PATH_CONSTRUCTION = "path_construction";
      public static final String CLASS_SERVICE_CONSTRUCTION = "service_construction";
      public static final String CLASS_TRACK_CONSTRUCTION = "track_construction";
      public static final String CLASS_RACEWAY_CONSTRUCTION = "raceway_construction";
      public static final String SUBCLASS_RAIL = "rail";
      public static final String SUBCLASS_NARROW_GAUGE = "narrow_gauge";
      public static final String SUBCLASS_PRESERVED = "preserved";
      public static final String SUBCLASS_FUNICULAR = "funicular";
      public static final String SUBCLASS_SUBWAY = "subway";
      public static final String SUBCLASS_LIGHT_RAIL = "light_rail";
      public static final String SUBCLASS_MONORAIL = "monorail";
      public static final String SUBCLASS_TRAM = "tram";
      public static final String SUBCLASS_PEDESTRIAN = "pedestrian";
      public static final String SUBCLASS_PATH = "path";
      public static final String SUBCLASS_FOOTWAY = "footway";
      public static final String SUBCLASS_CYCLEWAY = "cycleway";
      public static final String SUBCLASS_STEPS = "steps";
      public static final String SUBCLASS_BRIDLEWAY = "bridleway";
      public static final String SUBCLASS_CORRIDOR = "corridor";
      public static final String SUBCLASS_PLATFORM = "platform";
      public static final String BRUNNEL_BRIDGE = "bridge";
      public static final String BRUNNEL_TUNNEL = "tunnel";
      public static final String BRUNNEL_FORD = "ford";
      public static final String SERVICE_SPUR = "spur";
      public static final String SERVICE_YARD = "yard";
      public static final String SERVICE_SIDING = "siding";
      public static final String SERVICE_CROSSOVER = "crossover";
      public static final String SERVICE_DRIVEWAY = "driveway";
      public static final String SERVICE_ALLEY = "alley";
      public static final String SERVICE_PARKING_AISLE = "parking_aisle";
      public static final String SURFACE_PAVED = "paved";
      public static final String SURFACE_UNPAVED = "unpaved";
    }

    final class FieldMappings {

      public static final MultiExpression<String> Class = MultiExpression.of(Map
        .ofEntries(Map.entry("motorway", matchAny("highway", "motorway", "motorway_link")),
          Map.entry("trunk", matchAny("highway", "trunk", "trunk_link")),
          Map.entry("primary", matchAny("highway", "primary", "primary_link")),
          Map.entry("secondary", matchAny("highway", "secondary", "secondary_link")),
          Map.entry("tertiary", matchAny("highway", "tertiary", "tertiary_link")),
          Map.entry("minor", matchAny("highway", "unclassified", "residential", "living_street", "road")), Map
            .entry("path",
              or(matchAny("highway", "pedestrian", "path", "footway", "cycleway", "steps", "bridleway", "corridor"),
                matchAny("public_transport", "platform"))), Map.entry("service", matchAny("highway", "service")),
          Map.entry("track", matchAny("highway", "track")), Map.entry("raceway", matchAny("highway", "raceway")), Map
            .entry("motorway_construction",
              and(matchAny("highway", "construction"), matchAny("construction", "motorway", "motorway_link"))), Map
            .entry("trunk_construction",
              and(matchAny("highway", "construction"), matchAny("construction", "trunk", "trunk_link"))), Map
            .entry("primary_construction",
              and(matchAny("highway", "construction"), matchAny("construction", "primary", "primary_link"))), Map
            .entry("secondary_construction",
              and(matchAny("highway", "construction"), matchAny("construction", "secondary", "secondary_link"))), Map
            .entry("tertiary_construction",
              and(matchAny("highway", "construction"), matchAny("construction", "tertiary", "tertiary_link"))), Map
            .entry("minor_construction", and(matchAny("highway", "construction"),
              matchAny("construction", "", "unclassified", "residential", "living_street", "road"))), Map
            .entry("path_construction", and(matchAny("highway", "construction"), or(
              matchAny("construction", "pedestrian", "path", "footway", "cycleway", "steps", "bridleway", "corridor"),
              matchAny("public_transport", "platform")))), Map.entry("service_construction",
            and(matchAny("highway", "construction"), matchAny("construction", "service"))),
          Map.entry("track_construction", and(matchAny("highway", "construction"), matchAny("construction", "track"))),
          Map.entry("raceway_construction",
            and(matchAny("highway", "construction"), matchAny("construction", "raceway")))));
    }
  }

  /**
   * All [OSM Buildings](http://wiki.openstreetmap.org/wiki/Buildings). All building tags are imported ([`building=
   * `](http://wiki.openstreetmap.org/wiki/Key:building)). The buildings are not yet ready for 3D rendering support and
   * any help to improve this is welcomed.
   */
  public interface Building extends Layer {

    double BUFFER_SIZE = 4.0;
    String LAYER_NAME = "building";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * An approximated height from levels and height of the building or building:part after the method of Paul Norman
       * in [OSM Clear](https://github.com/ClearTables/osm-clear). For future 3D rendering of buildings.
       */
      public static final String RENDER_HEIGHT = "render_height";
      /**
       * An approximated height from levels and height of the bottom of the building or building:part after the method
       * of Paul Norman in [OSM Clear](https://github.com/ClearTables/osm-clear). For future 3D rendering of buildings.
       */
      public static final String RENDER_MIN_HEIGHT = "render_min_height";
      /**
       * Colour
       */
      public static final String COLOUR = "colour";
      /**
       * If True, building (part) should not be rendered in 3D. Currently, [building
       * outlines](https://wiki.openstreetmap.org/wiki/Simple_3D_buildings) are marked as hide_3d.
       */
      public static final String HIDE_3D = "hide_3d";
    }

    final class FieldValues {

    }

    final class FieldMappings {

    }
  }

  /**
   * Lake center lines for labelling lake bodies. This is based of the [osm-lakelines](https://github.com/lukasmartinelli/osm-lakelines)
   * project which derives nice centerlines from OSM water bodies. Only the most important lakes contain labels.
   */
  public interface WaterName extends Layer {

    double BUFFER_SIZE = 256.0;
    String LAYER_NAME = "water_name";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the water body.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";

      /**
       * At the moment only `lake` since no ocean parts are labelled. Reserved for future use .
       * <p>
       * allowed values:
       * <ul>
       * <li>"lake"
       * </ul>
       */
      public static final String CLASS = "class";

      /**
       * Mark with `1` if it is an [intermittent](http://wiki.openstreetmap.org/wiki/Key:intermittent) lake.
       * <p>
       * allowed values:
       * <ul>
       * <li>0
       * <li>1
       * </ul>
       */
      public static final String INTERMITTENT = "intermittent";
    }

    final class FieldValues {

      public static final String CLASS_LAKE = "lake";
    }

    final class FieldMappings {

    }
  }

  /**
   * This is the layer for labelling the highways. Only highways that are named `name= ` and are long enough to place
   * text upon appear. The OSM roads are stitched together if they contain the same name to have better label placement
   * than having many small linestrings. For motorways you should use the `ref` field to label them while for other
   * roads you should use `name`.
   */
  public interface TransportationName extends Layer {

    double BUFFER_SIZE = 8.0;
    String LAYER_NAME = "transportation_name";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Highways#Names_and_references) value of the highway.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";
      /**
       * The OSM [`ref`](http://wiki.openstreetmap.org/wiki/Key:ref) tag of the motorway or its network.
       */
      public static final String REF = "ref";
      /**
       * Length of the `ref` field. Useful for having a shield icon as background for labeling motorways.
       */
      public static final String REF_LENGTH = "ref_length";

      /**
       * The network type derived mainly from [`network`](http://wiki.openstreetmap.org/wiki/Key:network) tag of the
       * road. See more info about [`us- `](http://wiki.openstreetmap.org/wiki/Road_signs_in_the_United_States),
       * [`ca-transcanada`](https://en.wikipedia.org/wiki/Trans-Canada_Highway), or [`gb-
       * `](http://wiki.openstreetmap.org/wiki/United_Kingdom_Tagging_Guidelines#UK_roads).
       * <p>
       * allowed values:
       * <ul>
       * <li>"us-interstate"
       * <li>"us-highway"
       * <li>"us-state"
       * <li>"ca-transcanada"
       * <li>"gb-motorway"
       * <li>"gb-trunk"
       * <li>"road (default)"
       * </ul>
       */
      public static final String NETWORK = "network";

      /**
       * Distinguish between more and less important roads and roads under construction.
       * <p>
       * allowed values:
       * <ul>
       * <li>"motorway"
       * <li>"trunk"
       * <li>"primary"
       * <li>"secondary"
       * <li>"tertiary"
       * <li>"minor"
       * <li>"service"
       * <li>"track"
       * <li>"path"
       * <li>"raceway"
       * <li>"motorway_construction"
       * <li>"trunk_construction"
       * <li>"primary_construction"
       * <li>"secondary_construction"
       * <li>"tertiary_construction"
       * <li>"minor_construction"
       * <li>"service_construction"
       * <li>"track_construction"
       * <li>"path_construction"
       * <li>"raceway_construction"
       * <li>"rail"
       * <li>"transit"
       * </ul>
       */
      public static final String CLASS = "class";

      /**
       * Distinguish more specific classes of path: Subclass is value of the [`highway`](http://wiki.openstreetmap.org/wiki/Key:highway)
       * (for paths).
       * <p>
       * allowed values:
       * <ul>
       * <li>"pedestrian"
       * <li>"path"
       * <li>"footway"
       * <li>"cycleway"
       * <li>"steps"
       * <li>"bridleway"
       * <li>"corridor"
       * <li>"platform"
       * </ul>
       */
      public static final String SUBCLASS = "subclass";

      /**
       * Mark whether way is a bridge, a tunnel or a ford.
       * <p>
       * allowed values:
       * <ul>
       * <li>"bridge"
       * <li>"tunnel"
       * <li>"ford"
       * </ul>
       */
      public static final String BRUNNEL = "brunnel";
      /**
       * Experimental feature! Filled only for steps and footways. Original value of
       * [`level`](http://wiki.openstreetmap.org/wiki/Key:level) tag.
       */
      public static final String LEVEL = "level";
      /**
       * Experimental feature! Filled only for steps and footways. Original value of
       * [`layer`](http://wiki.openstreetmap.org/wiki/Key:layer) tag.
       */
      public static final String LAYER = "layer";

      /**
       * Experimental feature! Filled only for steps and footways. Original value of
       * [`indoor`](http://wiki.openstreetmap.org/wiki/Key:indoor) tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>1
       * </ul>
       */
      public static final String INDOOR = "indoor";
    }

    final class FieldValues {

      public static final String NETWORK_US_INTERSTATE = "us-interstate";
      public static final String NETWORK_US_HIGHWAY = "us-highway";
      public static final String NETWORK_US_STATE = "us-state";
      public static final String NETWORK_CA_TRANSCANADA = "ca-transcanada";
      public static final String NETWORK_GB_MOTORWAY = "gb-motorway";
      public static final String NETWORK_GB_TRUNK = "gb-trunk";
      public static final String NETWORK_ROAD = "road";
      public static final String CLASS_MOTORWAY = "motorway";
      public static final String CLASS_TRUNK = "trunk";
      public static final String CLASS_PRIMARY = "primary";
      public static final String CLASS_SECONDARY = "secondary";
      public static final String CLASS_TERTIARY = "tertiary";
      public static final String CLASS_MINOR = "minor";
      public static final String CLASS_SERVICE = "service";
      public static final String CLASS_TRACK = "track";
      public static final String CLASS_PATH = "path";
      public static final String CLASS_RACEWAY = "raceway";
      public static final String CLASS_MOTORWAY_CONSTRUCTION = "motorway_construction";
      public static final String CLASS_TRUNK_CONSTRUCTION = "trunk_construction";
      public static final String CLASS_PRIMARY_CONSTRUCTION = "primary_construction";
      public static final String CLASS_SECONDARY_CONSTRUCTION = "secondary_construction";
      public static final String CLASS_TERTIARY_CONSTRUCTION = "tertiary_construction";
      public static final String CLASS_MINOR_CONSTRUCTION = "minor_construction";
      public static final String CLASS_SERVICE_CONSTRUCTION = "service_construction";
      public static final String CLASS_TRACK_CONSTRUCTION = "track_construction";
      public static final String CLASS_PATH_CONSTRUCTION = "path_construction";
      public static final String CLASS_RACEWAY_CONSTRUCTION = "raceway_construction";
      public static final String CLASS_RAIL = "rail";
      public static final String CLASS_TRANSIT = "transit";
      public static final String SUBCLASS_PEDESTRIAN = "pedestrian";
      public static final String SUBCLASS_PATH = "path";
      public static final String SUBCLASS_FOOTWAY = "footway";
      public static final String SUBCLASS_CYCLEWAY = "cycleway";
      public static final String SUBCLASS_STEPS = "steps";
      public static final String SUBCLASS_BRIDLEWAY = "bridleway";
      public static final String SUBCLASS_CORRIDOR = "corridor";
      public static final String SUBCLASS_PLATFORM = "platform";
      public static final String BRUNNEL_BRIDGE = "bridge";
      public static final String BRUNNEL_TUNNEL = "tunnel";
      public static final String BRUNNEL_FORD = "ford";
    }

    final class FieldMappings {

    }
  }

  /**
   * The place layer consists out of [countries](http://wiki.openstreetmap.org/wiki/Tag:place%3Dcountry),
   * [states](http://wiki.openstreetmap.org/wiki/Tag:place%3Dstate) and [cities](http://wiki.openstreetmap.org/wiki/Key:place).
   * Apart from the roads this is also one of the more important layers to create a beautiful map. We suggest you use
   * different font styles and sizes to create a text hierarchy.
   */
  public interface Place extends Layer {

    double BUFFER_SIZE = 256.0;
    String LAYER_NAME = "place";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the POI.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";

      /**
       * The capital field marks the [`admin_level`](http://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative#admin_level)
       * of the boundary the place is a capital of.
       * <p>
       * allowed values:
       * <ul>
       * <li>2
       * <li>4
       * </ul>
       */
      public static final String CAPITAL = "capital";

      /**
       * Original value of the [`place`](http://wiki.openstreetmap.org/wiki/Key:place) tag. Distinguish between
       * continents, countries, states and places like settlements or smaller entities. Use class to separately style
       * the different places and build a text hierarchy according to their importance.
       * <p>
       * allowed values:
       * <ul>
       * <li>"continent"
       * <li>"country"
       * <li>"state"
       * <li>"city"
       * <li>"town"
       * <li>"village"
       * <li>"hamlet"
       * <li>"suburb"
       * <li>"quarter"
       * <li>"neighbourhood"
       * <li>"isolated_dwelling"
       * </ul>
       */
      public static final String CLASS = "class";
      /**
       * Two-letter country code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Available only
       * for `class=country`. Original value of the [`country_code_iso3166_1_alpha_2`](http://wiki.openstreetmap.org/wiki/Tag:place%3Dcountry)
       * tag.
       */
      public static final String ISO_A2 = "iso_a2";
      /**
       * Countries, states and the most important cities all have a rank to boost their importance on the map. The rank
       * field for counries and states ranges from `1` to `6` while the rank field for cities ranges from `1` to `10`
       * for the most important cities and continues from `10` serially based on the local importance of the city
       * (derived from population and city class). You can use the rank to limit density of labels or improve the text
       * hierarchy. The rank value is a combination of the Natural Earth `scalerank`, `labelrank` and `datarank` values
       * for countries and states and for cities consists out of a shifted Natural Earth `scalerank` combined with a
       * local rank within a grid for cities that do not have a Natural Earth `scalerank`.
       */
      public static final String RANK = "rank";
    }

    final class FieldValues {

      public static final String CLASS_CONTINENT = "continent";
      public static final String CLASS_COUNTRY = "country";
      public static final String CLASS_STATE = "state";
      public static final String CLASS_CITY = "city";
      public static final String CLASS_TOWN = "town";
      public static final String CLASS_VILLAGE = "village";
      public static final String CLASS_HAMLET = "hamlet";
      public static final String CLASS_SUBURB = "suburb";
      public static final String CLASS_QUARTER = "quarter";
      public static final String CLASS_NEIGHBOURHOOD = "neighbourhood";
      public static final String CLASS_ISOLATED_DWELLING = "isolated_dwelling";
    }

    final class FieldMappings {

    }
  }

  /**
   * Everything in OpenStreetMap which contains a `addr:housenumber` tag useful for labelling housenumbers on a map.
   * This adds significant size to z14 . For buildings the centroid of the building is used as housenumber.
   */
  public interface Housenumber extends Layer {

    double BUFFER_SIZE = 8.0;
    String LAYER_NAME = "housenumber";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * Value of the [`addr:housenumber`](http://wiki.openstreetmap.org/wiki/Key:addr) tag.
       */
      public static final String HOUSENUMBER = "housenumber";
    }

    final class FieldValues {

    }

    final class FieldMappings {

    }
  }

  /**
   * [Points of interests](http://wiki.openstreetmap.org/wiki/Points_of_interest) containing a of a variety of
   * OpenStreetMap tags. Mostly contains amenities, sport, shop and tourist POIs.
   */
  public interface Poi extends Layer {

    double BUFFER_SIZE = 64.0;
    String LAYER_NAME = "poi";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the POI.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";

      /**
       * More general classes of POIs. If there is no more general `class` for the `subclass` this field will contain
       * the same value as `subclass`. But for example for schools you only need to style the class `school` to filter
       * the subclasses `school` and `kindergarten`. Or use the class `shop` to style all shops.
       * <p>
       * allowed values:
       * <ul>
       * <li>shop
       * <li>town_hall
       * <li>golf
       * <li>fast_food
       * <li>park
       * <li>bus
       * <li>railway
       * <li>aerialway
       * <li>entrance
       * <li>campsite
       * <li>laundry
       * <li>grocery
       * <li>library
       * <li>college
       * <li>lodging
       * <li>ice_cream
       * <li>post
       * <li>cafe
       * <li>school
       * <li>alcohol_shop
       * <li>bar
       * <li>harbor
       * <li>car
       * <li>hospital
       * <li>cemetery
       * <li>attraction
       * <li>beer
       * <li>music
       * <li>stadium
       * <li>art_gallery
       * <li>clothing_store
       * <li>swimming
       * <li>castle
       * </ul>
       */
      public static final String CLASS = "class";
      /**
       * Original value of either the [`amenity`](http://wiki.openstreetmap.org/wiki/Key:amenity),
       * [`barrier`](http://wiki.openstreetmap.org/wiki/Key:barrier), [`historic`](http://wiki.openstreetmap.org/wiki/Key:historic),
       * [`information`](http://wiki.openstreetmap.org/wiki/Key:information), [`landuse`](http://wiki.openstreetmap.org/wiki/Key:landuse),
       * [`leisure`](http://wiki.openstreetmap.org/wiki/Key:leisure), [`railway`](http://wiki.openstreetmap.org/wiki/Key:railway),
       * [`shop`](http://wiki.openstreetmap.org/wiki/Key:shop), [`sport`](http://wiki.openstreetmap.org/wiki/Key:sport),
       * [`station`](http://wiki.openstreetmap.org/wiki/Key:station), [`religion`](http://wiki.openstreetmap.org/wiki/Key:religion),
       * [`tourism`](http://wiki.openstreetmap.org/wiki/Key:tourism), [`aerialway`](http://wiki.openstreetmap.org/wiki/Key:aerialway),
       * [`building`](http://wiki.openstreetmap.org/wiki/Key:building), [`highway`](http://wiki.openstreetmap.org/wiki/Key:highway)
       * or [`waterway`](http://wiki.openstreetmap.org/wiki/Key:waterway) tag. Use this to do more precise styling.
       */
      public static final String SUBCLASS = "subclass";
      /**
       * The POIs are ranked ascending according to their importance within a grid. The `rank` value shows the local
       * relative importance of a POI within it's cell in the grid. This can be used to reduce label density at z14 .
       * Since all POIs already need to be contained at z14 you can use `less than rank=10` epxression to limit POIs. At
       * some point like z17 you can show all POIs.
       */
      public static final String RANK = "rank";

      /**
       * Experimental feature! Indicates main platform of public transport stops (buses, trams, and subways). Grouping
       * of platforms is implemented using [`uic_ref`](http://wiki.openstreetmap.org/wiki/Key:uic_ref) tag that is not
       * used worldwide.
       * <p>
       * allowed values:
       * <ul>
       * <li>1
       * </ul>
       */
      public static final String AGG_STOP = "agg_stop";
      /**
       * Original value of [`level`](http://wiki.openstreetmap.org/wiki/Key:level) tag.
       */
      public static final String LEVEL = "level";
      /**
       * Original value of [`layer`](http://wiki.openstreetmap.org/wiki/Key:layer) tag.
       */
      public static final String LAYER = "layer";

      /**
       * Original value of [`indoor`](http://wiki.openstreetmap.org/wiki/Key:indoor) tag.
       * <p>
       * allowed values:
       * <ul>
       * <li>1
       * </ul>
       */
      public static final String INDOOR = "indoor";
    }

    final class FieldValues {

      public static final String CLASS_SHOP = "shop";
      public static final String CLASS_TOWN_HALL = "town_hall";
      public static final String CLASS_GOLF = "golf";
      public static final String CLASS_FAST_FOOD = "fast_food";
      public static final String CLASS_PARK = "park";
      public static final String CLASS_BUS = "bus";
      public static final String CLASS_RAILWAY = "railway";
      public static final String CLASS_AERIALWAY = "aerialway";
      public static final String CLASS_ENTRANCE = "entrance";
      public static final String CLASS_CAMPSITE = "campsite";
      public static final String CLASS_LAUNDRY = "laundry";
      public static final String CLASS_GROCERY = "grocery";
      public static final String CLASS_LIBRARY = "library";
      public static final String CLASS_COLLEGE = "college";
      public static final String CLASS_LODGING = "lodging";
      public static final String CLASS_ICE_CREAM = "ice_cream";
      public static final String CLASS_POST = "post";
      public static final String CLASS_CAFE = "cafe";
      public static final String CLASS_SCHOOL = "school";
      public static final String CLASS_ALCOHOL_SHOP = "alcohol_shop";
      public static final String CLASS_BAR = "bar";
      public static final String CLASS_HARBOR = "harbor";
      public static final String CLASS_CAR = "car";
      public static final String CLASS_HOSPITAL = "hospital";
      public static final String CLASS_CEMETERY = "cemetery";
      public static final String CLASS_ATTRACTION = "attraction";
      public static final String CLASS_BEER = "beer";
      public static final String CLASS_MUSIC = "music";
      public static final String CLASS_STADIUM = "stadium";
      public static final String CLASS_ART_GALLERY = "art_gallery";
      public static final String CLASS_CLOTHING_STORE = "clothing_store";
      public static final String CLASS_SWIMMING = "swimming";
      public static final String CLASS_CASTLE = "castle";
    }

    final class FieldMappings {

      public static final MultiExpression<String> Class = MultiExpression.of(Map.ofEntries(Map.entry("shop",
        matchAny("subclass", "accessories", "antiques", "beauty", "bed", "boutique", "camera", "carpet", "charity",
          "chemist", "coffee", "computer", "convenience", "copyshop", "cosmetics", "garden_centre", "doityourself",
          "erotic", "electronics", "fabric", "florist", "frozen_food", "furniture", "video_games", "video", "general",
          "gift", "hardware", "hearing_aids", "hifi", "ice_cream", "interior_decoration", "jewelry", "kiosk", "lamps",
          "mall", "massage", "motorcycle", "mobile_phone", "newsagent", "optician", "outdoor", "perfumery", "perfume",
          "pet", "photo", "second_hand", "shoes", "sports", "stationery", "tailor", "tattoo", "ticket", "tobacco",
          "toys", "travel_agency", "watches", "weapons", "wholesale")),
        Map.entry("town_hall", matchAny("subclass", "townhall", "public_building", "courthouse", "community_centre")),
        Map.entry("golf", matchAny("subclass", "golf", "golf_course", "miniature_golf")),
        Map.entry("fast_food", matchAny("subclass", "fast_food", "food_court")),
        Map.entry("park", matchAny("subclass", "park", "bbq")),
        Map.entry("bus", matchAny("subclass", "bus_stop", "bus_station")), Map.entry("railway",
          or(and(matchAny("subclass", "station"), matchAny("mapping_key", "railway")),
            matchAny("subclass", "halt", "tram_stop", "subway"))),
        Map.entry("aerialway", and(matchAny("subclass", "station"), matchAny("mapping_key", "aerialway"))),
        Map.entry("entrance", matchAny("subclass", "subway_entrance", "train_station_entrance")),
        Map.entry("campsite", matchAny("subclass", "camp_site", "caravan_site")),
        Map.entry("laundry", matchAny("subclass", "laundry", "dry_cleaning")), Map.entry("grocery",
          matchAny("subclass", "supermarket", "deli", "delicatessen", "department_store", "greengrocer",
            "marketplace")), Map.entry("library", matchAny("subclass", "books", "library")),
        Map.entry("college", matchAny("subclass", "university", "college")), Map.entry("lodging",
          matchAny("subclass", "hotel", "motel", "bed_and_breakfast", "guest_house", "hostel", "chalet", "alpine_hut",
            "dormitory")), Map.entry("ice_cream", matchAny("subclass", "chocolate", "confectionery")),
        Map.entry("post", matchAny("subclass", "post_box", "post_office")),
        Map.entry("cafe", matchAny("subclass", "cafe")),
        Map.entry("school", matchAny("subclass", "school", "kindergarten")),
        Map.entry("alcohol_shop", matchAny("subclass", "alcohol", "beverages", "wine")),
        Map.entry("bar", matchAny("subclass", "bar", "nightclub")),
        Map.entry("harbor", matchAny("subclass", "marina", "dock")),
        Map.entry("car", matchAny("subclass", "car", "car_repair", "car_parts", "taxi")),
        Map.entry("hospital", matchAny("subclass", "hospital", "nursing_home", "clinic")),
        Map.entry("cemetery", matchAny("subclass", "grave_yard", "cemetery")),
        Map.entry("attraction", matchAny("subclass", "attraction", "viewpoint")),
        Map.entry("beer", matchAny("subclass", "biergarten", "pub")),
        Map.entry("music", matchAny("subclass", "music", "musical_instrument")),
        Map.entry("stadium", matchAny("subclass", "american_football", "stadium", "soccer")),
        Map.entry("art_gallery", matchAny("subclass", "art", "artwork", "gallery", "arts_centre")),
        Map.entry("clothing_store", matchAny("subclass", "bag", "clothes")),
        Map.entry("swimming", matchAny("subclass", "swimming_area", "swimming")),
        Map.entry("castle", matchAny("subclass", "castle", "ruins"))));
    }
  }

  /**
   * [Aerodrome labels](http://wiki.openstreetmap.org/wiki/Tag:aeroway%3Daerodrome)
   */
  public interface AerodromeLabel extends Layer {

    double BUFFER_SIZE = 64.0;
    String LAYER_NAME = "aerodrome_label";

    @Override
    default String name() {
      return LAYER_NAME;
    }

    final class Fields {

      /**
       * The OSM [`name`](http://wiki.openstreetmap.org/wiki/Key:name) value of the aerodrome.
       */
      public static final String NAME = "name";
      /**
       * English name `name:en` if available, otherwise `name`.
       */
      public static final String NAME_EN = "name_en";
      /**
       * German name `name:de` if available, otherwise `name` or `name:en`.
       */
      public static final String NAME_DE = "name_de";

      /**
       * Distinguish between more and less important aerodromes. Class is derived from the value of
       * [`aerodrome`](http://wiki.openstreetmap.org/wiki/Proposed_features/Aerodrome) and `aerodrome:type` tags.
       * <p>
       * allowed values:
       * <ul>
       * <li>international
       * <li>public
       * <li>regional
       * <li>military
       * <li>private
       * <li>other
       * </ul>
       */
      public static final String CLASS = "class";
      /**
       * 3-character code issued by the IATA.
       */
      public static final String IATA = "iata";
      /**
       * 4-letter code issued by the ICAO.
       */
      public static final String ICAO = "icao";
      /**
       * Elevation (`ele`) in meters.
       */
      public static final String ELE = "ele";
      /**
       * Elevation (`ele`) in feets.
       */
      public static final String ELE_FT = "ele_ft";
    }

    final class FieldValues {

      public static final String CLASS_INTERNATIONAL = "international";
      public static final String CLASS_PUBLIC = "public";
      public static final String CLASS_REGIONAL = "regional";
      public static final String CLASS_MILITARY = "military";
      public static final String CLASS_PRIVATE = "private";
      public static final String CLASS_OTHER = "other";
    }

    final class FieldMappings {

      public static final MultiExpression<String> Class = MultiExpression.of(Map.ofEntries(Map.entry("international",
        or(matchAny("aerodrome", "international"), matchAny("aerodrome_type", "international"))),
        Map.entry("public", or(matchAny("aerodrome", "public"), matchAny("aerodrome_type", "%public%", "civil"))),
        Map.entry("regional", or(matchAny("aerodrome", "regional"), matchAny("aerodrome_type", "regional"))), Map
          .entry("military", or(matchAny("aerodrome", "military"), matchAny("aerodrome_type", "%military%"),
            matchAny("military", "airfield"))),
        Map.entry("private", or(matchAny("aerodrome", "private"), matchAny("aerodrome_type", "private"))),
        Map.entry("other", FALSE)));
    }
  }
}
